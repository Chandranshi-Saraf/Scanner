package com.instasafe.nmapscanner;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.management.ManagementFactory;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;

import org.json.JSONObject;
import org.json.XML;
import org.xml.sax.SAXException;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.itextpdf.text.DocumentException;

public class ZapScan {

	List<ZapSite> zapSite = new ArrayList<ZapSite>();
	String tempDir = System.getProperty("java.io.tmpdir");

	public List<ZapSite> scan(String fileName, String url, String logzap, String session) {

		String s;
		Process p;
		try {
			
			String prop=tempDir+"/scan/ZAP_2.8.0/xml/log4j.properties";
			String content="log4j.rootLogger=info, R\n" + 
					"\n" + 
					"\n" + 
					"log4j.appender.R=org.apache.log4j.RollingFileAppender\n" + 
					"#to move to dynamically user log file.  See Constant.java\n" + 
					"# ZAP: rebrand\n" + 
					"log4j.appender.R.File=${zap.user.log}/"+logzap+"\n" + 
					"\n" + 
					"log4j.appender.R.MaxFileSize=4096KB\n" + 
					"# Keep one backup file\n" + 
					"log4j.appender.R.MaxBackupIndex=3\n" + 
					"\n" + 
					"log4j.appender.R.layout=org.apache.log4j.PatternLayout\n" + 
					"log4j.appender.R.layout.ConversionPattern=%d [%-5t] %-5p %c{1} - %m%n\n" + 
					"\n" + 
					"log4j.logger.org.parosproxy.paros=INFO\n" + 
					"log4j.logger.org.zaproxy.zap=INFO\n" + 
					"log4j.logger.org.apache.commons.httpclient=ERROR\n" + 
					"# Disable Jericho log, it logs HTML parsing issues as errors.\n" + 
					"log4j.logger.net.htmlparser.jericho=OFF\n" + 
					"\n" + 
					"# Prevent Crawljax from logging too many, not so useful, INFO messages.\n" + 
					"# For example:\n" + 
					"# INFO  Crawler - New DOM is a new state! crawl depth is now 10\n" + 
					"# INFO  Crawler - Crawl depth is now 1\n" + 
					"# INFO  Crawler - Crawl depth is now 2\n" + 
					"# INFO  UnfiredCandidateActions - There are 64 states with unfired actions\n" + 
					"# INFO  StateMachine - State state106 added to the StateMachine.\n" + 
					"log4j.logger.com.crawljax.core.Crawler = WARN\n" + 
					"log4j.logger.com.crawljax.core.state.StateMachine = WARN\n" + 
					"log4j.logger.com.crawljax.core.UnfiredCandidateActions = WARN\n" + 
					"";
			
			File file = new File(prop);
	        file.createNewFile();
	        FileWriter fw=new FileWriter(file);    
	           fw.write(content);    
	           fw.close();  
			ProcessBuilder processBuilder = new ProcessBuilder("java", "-jar",
					tempDir + "/scan/ZAP_2.8.0/zap-2.8.0.jar", "-newsession", session, "-quickurl", "http://" + url,
					"-quickout", fileName, "-cmd");
//				String command="java -jar zaproxy/zap-2.7.0.jar -daemon -quickurl http://"+url+" -quickout "+fileName;
//				p = Runtime.getRuntime().exec("/bin/bash");
			processBuilder.directory(new File(tempDir + "/scan/ZAP_2.8.0"));
			p = processBuilder.start();
			BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
			System.out.println("br value is " + br);
			while ((s = br.readLine()) != null)
				System.out.println("line: " + s);
			p.waitFor();
			String name = ManagementFactory.getRuntimeMXBean().getName();
			long pid = Long.valueOf(name.split("@")[0]);
			System.out.println("Process ID for this app = " + pid);
			if (p.exitValue() != 0) {
				String cmd = "taskkill /F /T /PID " + pid;
				Runtime.getRuntime().exec(cmd);
			}
			System.out.println("exit: " + p.exitValue());
			p.destroy();
//				fileName=tempDir+"/scan/ZAP_2.8.0/report.xml";
			System.out.println(fileName);
			generateReport(fileName);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return zapSite;
	}

	public void generateReport(String xmlFile)
			throws TransformerException, SAXException, IOException, ParserConfigurationException, DocumentException {
		String xml_data = new XMlReader().read(xmlFile);
		PDFWriter pdfWriter = new PDFWriter();
		JSONObject obj = XML.toJSONObject(xml_data);
		System.out.println(obj.toString());
		JsonParser jparser = new JsonParser();
		JsonElement json = jparser.parse(obj.toString());
		JsonObject zapReport = json.getAsJsonObject();
		if (zapReport.has("OWASPZAPReport")) {

			zapReport = zapReport.get("OWASPZAPReport").getAsJsonObject();
			if (zapReport != null) {
				if (zapReport.has("site")) {
					if (zapReport.get("site").isJsonArray()) {
						for (JsonElement site : zapReport.get("site").getAsJsonArray()) {
							zapSite.add(createSite(site.getAsJsonObject()));
//						    System.out.println(zapSite.getPort().toString());
//							pdfWriter.addSite(zapSite.get(0));
						}
					} else {
						JsonObject site = zapReport.get("site").getAsJsonObject();
						zapSite.add(createSite(site.getAsJsonObject()));
//						pdfWriter.addSite(zapSite.get(0));
					}
				}
			}
		}
	}

	private ZapSite createSite(JsonObject site) {
		ZapSite zapSite = new ZapSite();
		zapSite.setHost(site.get("host").getAsString());
		zapSite.setName(site.get("name").getAsString());
		zapSite.setPort(site.get("port").getAsString());
		zapSite.setSsl(site.get("ssl").getAsString());
		zapSite.setAlertitem(new ArrayList<ZapAlertItem>());
		if (site.has("alerts")) {
			if (site.get("alerts").getAsJsonObject().has("alertitem")) {
				if (site.get("alerts").getAsJsonObject().get("alertitem").isJsonArray()) {
					for (JsonElement alertItem : site.get("alerts").getAsJsonObject().get("alertitem")
							.getAsJsonArray()) {
						JsonObject item = alertItem.getAsJsonObject();
						ZapAlertItem zapAlert = createAlert(item);
						zapSite.getAlertitem().add(zapAlert);
						zapSite.setAll();
					}
				} else {
					JsonObject item = site.get("alerts").getAsJsonObject().get("alertitem").getAsJsonObject();
					ZapAlertItem zapAlert = createAlert(item);
					zapSite.getAlertitem().add(zapAlert);
				}
			}
		}
		return zapSite;
	}

	private ZapAlertItem createAlert(JsonObject item) {

		ZapAlertItem zapAlert = new ZapAlertItem();
		zapAlert.setInstances(new ArrayList<ZapInstance>());
		zapAlert.setAlert(item.get("alert").getAsString());
		zapAlert.setConfidence(item.get("confidence").getAsString());
		zapAlert.setCount(item.get("count").getAsString());
		if (item.has("cweid")) {
			zapAlert.setCweid(item.get("cweid").getAsString());
		}
		zapAlert.setDesc(item.get("desc").getAsString());
		zapAlert.setRefer(item.get("reference").getAsString());
		System.out.println("Riskcode here is :" + (Integer.parseInt(item.get("riskcode").getAsString())));
		zapAlert.setRiskcode(Integer.parseInt(item.get("riskcode").getAsString()));
		zapAlert.setRiskdesc(item.get("riskdesc").getAsString());
		zapAlert.setSolution(item.get("solution").getAsString());
		zapAlert.setSourceid(item.get("sourceid").getAsString());
		if (item.has("wascid")) {
			zapAlert.setWascid(item.get("wascid").getAsString());
		}
		if (item.has("instances")) {
			if (item.get("instances").getAsJsonObject().has("instance")) {
				if (item.get("instances").getAsJsonObject().get("instance").isJsonArray()) {
					for (JsonElement instance : item.get("instances").getAsJsonObject().get("instance")
							.getAsJsonArray()) {
						JsonObject alertInstance = instance.getAsJsonObject();
						ZapInstance zapInstance = createInstance(alertInstance);
						zapAlert.getInstances().add(zapInstance);
					}
				} else {
					JsonObject alertInstance = item.get("instances").getAsJsonObject().get("instance")
							.getAsJsonObject();
					ZapInstance zapInstance = createInstance(alertInstance);
					zapAlert.getInstances().add(zapInstance);
				}
			}
		}
		return zapAlert;
	}

	private ZapInstance createInstance(JsonObject instance) {

		ZapInstance zapInstance = new ZapInstance();
		zapInstance.setUri(instance.get("uri").getAsString());
		zapInstance.setMethod(instance.get("method").getAsString());
		if (instance.has("param")) {
			zapInstance.setParameter(instance.get("param").getAsString());
		}
		if (instance.has("attack")) {
			zapInstance.setAttack(instance.get("attack").getAsString());
		}
		if (instance.has("evidence")) {
			zapInstance.setEvidence(instance.get("evidence").getAsString());
		}
		return zapInstance;
	}
}
