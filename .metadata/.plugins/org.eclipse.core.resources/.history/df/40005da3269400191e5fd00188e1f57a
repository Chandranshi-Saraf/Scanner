package com.instasafe.nmapscanner;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;

public class Main {

	private static String OS = System.getProperty("os.name").toLowerCase();

	public static void main(String[] args) throws Exception {

		String property = "java.io.tmpdir";
		String tempDir = System.getProperty(property);

		new File(tempDir + "/scan").mkdirs();
		
		new File(tempDir + "/scan/log").mkdirs();
		File dir = new File(tempDir + "/scan/log");
		System.out.println("OS current temporary directory is " + tempDir);
		
//		List<NiktoScanResponse> niktoResponse = new ArrayList<NiktoScanResponse>();
//		List<HostInfo> hostList = new ArrayList<HostInfo>();
//		List<ZapSite> zapSite = new ArrayList<ZapSite>();

		System.out.println(OS);

		if (!ToolChecker.isNmapExists()) {
			ToolDownloder.donwloadNmap();
			ToolDownloder.unzip(tempDir + "/scan/nmap.zip");
			ToolChecker.isNmapExists();
		}

//		if (!ToolChecker.isNiktoExists()) {
//			ToolDownloder.donwloadNikto();
//			ToolChecker.isNiktoExists();
//		}
		if (!ToolChecker.isZapExists()) {
			ToolDownloder.donwloadZap();
			ToolDownloder.unzip(tempDir + "/scan/zap.zip");
			
			String s;
			Process p;

			try {
				ProcessBuilder processBuilder = new ProcessBuilder("java", "-jar",
						tempDir + "/scan/ZAP_2.8.0/zap-2.8.0.jar", "-addoninstallall", "-cmd");
//				String command="java -jar zaproxy/zap-2.7.0.jar -daemon -quickurl http://"+url+" -quickout "+fileName;
//				p = Runtime.getRuntime().exec("/bin/bash");
				processBuilder.directory(new File(tempDir + "/scan/ZAP_2.8.0"));
				p = processBuilder.start();
				p.isAlive();
				BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
				System.out.println("br value is " + br);
				while ((s = br.readLine()) != null)
					System.out.println("line: " + s);
				p.waitFor();
				System.out.println("exit: " + p.exitValue());
				p.destroy();
			} catch (Exception e) {
				e.printStackTrace();
			}
			ToolChecker.isZapExists();
		}

		startScan sc = new startScan();
		sc.scan(tempDir);
		deleteDirectory(dir);

	}
	
	 public static boolean deleteDirectory(File dir) {
	        if (dir.isDirectory()) {
	            File[] children = dir.listFiles();
	            for (int i = 0; i < children.length; i++) {
	                boolean success = deleteDirectory(children[i]);
	                if (!success) {
	                    return false;
	                }
	            }
	        }	        
	        System.out.println("removing file or directory : " + dir.getName());
	        return dir.delete();
	    }

}
